// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic auth should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BasicAuth />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <span>
          Please provide your login credentials for:
        </span>,
        <span
          className="hostname"
        >
          unknown
        </span>,
        <span
          className="credentials-error"
          id="credentialsError"
        >
          Invalid user name/password
        </span>,
        <form
          action="Login"
          id="basicAuth"
          name="Basic Auth"
          onSubmit={[Function]}
        >
          <table
            className="form"
          >
            <tbody>
              <tr>
                <td
                  id="username-text"
                >
                  User name:
                </td>
                <td>
                  <input
                    id="username"
                    name="username"
                    onChange={[Function]}
                    required={true}
                    title="Username"
                  />
                </td>
              </tr>
              <tr>
                <td
                  id="password-text"
                >
                  Password:
                </td>
                <td>
                  <input
                    id="password"
                    name="password"
                    onChange={[Function]}
                    required={true}
                    title="Password"
                    type="password"
                  />
                </td>
              </tr>
            </tbody>
          </table>
          <div
            className="footer"
          >
            <div
              className="button-container"
            >
              <button
                id="login"
                type="submit"
              >
                Log In
              </button>
            </div>
            <div
              className="button-container"
            >
              <button
                id="cancel"
                onClick={[Function]}
                type="button"
              >
                Cancel
              </button>
            </div>
          </div>
        </form>,
      ],
      "className": "container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Please provide your login credentials for:",
        },
        "ref": null,
        "rendered": "Please provide your login credentials for:",
        "type": "span",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "unknown",
          "className": "hostname",
        },
        "ref": null,
        "rendered": "unknown",
        "type": "span",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Invalid user name/password",
          "className": "credentials-error",
          "id": "credentialsError",
        },
        "ref": null,
        "rendered": "Invalid user name/password",
        "type": "span",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "action": "Login",
          "children": Array [
            <table
              className="form"
            >
              <tbody>
                <tr>
                  <td
                    id="username-text"
                  >
                    User name:
                  </td>
                  <td>
                    <input
                      id="username"
                      name="username"
                      onChange={[Function]}
                      required={true}
                      title="Username"
                    />
                  </td>
                </tr>
                <tr>
                  <td
                    id="password-text"
                  >
                    Password:
                  </td>
                  <td>
                    <input
                      id="password"
                      name="password"
                      onChange={[Function]}
                      required={true}
                      title="Password"
                      type="password"
                    />
                  </td>
                </tr>
              </tbody>
            </table>,
            <div
              className="footer"
            >
              <div
                className="button-container"
              >
                <button
                  id="login"
                  type="submit"
                >
                  Log In
                </button>
              </div>
              <div
                className="button-container"
              >
                <button
                  id="cancel"
                  onClick={[Function]}
                  type="button"
                >
                  Cancel
                </button>
              </div>
            </div>,
          ],
          "id": "basicAuth",
          "name": "Basic Auth",
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <tbody>
                <tr>
                  <td
                    id="username-text"
                  >
                    User name:
                  </td>
                  <td>
                    <input
                      id="username"
                      name="username"
                      onChange={[Function]}
                      required={true}
                      title="Username"
                    />
                  </td>
                </tr>
                <tr>
                  <td
                    id="password-text"
                  >
                    Password:
                  </td>
                  <td>
                    <input
                      id="password"
                      name="password"
                      onChange={[Function]}
                      required={true}
                      title="Password"
                      type="password"
                    />
                  </td>
                </tr>
              </tbody>,
              "className": "form",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <tr>
                    <td
                      id="username-text"
                    >
                      User name:
                    </td>
                    <td>
                      <input
                        id="username"
                        name="username"
                        onChange={[Function]}
                        required={true}
                        title="Username"
                      />
                    </td>
                  </tr>,
                  <tr>
                    <td
                      id="password-text"
                    >
                      Password:
                    </td>
                    <td>
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        required={true}
                        title="Password"
                        type="password"
                      />
                    </td>
                  </tr>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <td
                        id="username-text"
                      >
                        User name:
                      </td>,
                      <td>
                        <input
                          id="username"
                          name="username"
                          onChange={[Function]}
                          required={true}
                          title="Username"
                        />
                      </td>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "User name:",
                        "id": "username-text",
                      },
                      "ref": null,
                      "rendered": "User name:",
                      "type": "td",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <input
                          id="username"
                          name="username"
                          onChange={[Function]}
                          required={true}
                          title="Username"
                        />,
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "id": "username",
                          "name": "username",
                          "onChange": [Function],
                          "required": true,
                          "title": "Username",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                      "type": "td",
                    },
                  ],
                  "type": "tr",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <td
                        id="password-text"
                      >
                        Password:
                      </td>,
                      <td>
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          required={true}
                          title="Password"
                          type="password"
                        />
                      </td>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Password:",
                        "id": "password-text",
                      },
                      "ref": null,
                      "rendered": "Password:",
                      "type": "td",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          required={true}
                          title="Password"
                          type="password"
                        />,
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "id": "password",
                          "name": "password",
                          "onChange": [Function],
                          "required": true,
                          "title": "Password",
                          "type": "password",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                      "type": "td",
                    },
                  ],
                  "type": "tr",
                },
              ],
              "type": "tbody",
            },
            "type": "table",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="button-container"
                >
                  <button
                    id="login"
                    type="submit"
                  >
                    Log In
                  </button>
                </div>,
                <div
                  className="button-container"
                >
                  <button
                    id="cancel"
                    onClick={[Function]}
                    type="button"
                  >
                    Cancel
                  </button>
                </div>,
              ],
              "className": "footer",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <button
                    id="login"
                    type="submit"
                  >
                    Log In
                  </button>,
                  "className": "button-container",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Log In",
                    "id": "login",
                    "type": "submit",
                  },
                  "ref": null,
                  "rendered": "Log In",
                  "type": "button",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <button
                    id="cancel"
                    onClick={[Function]}
                    type="button"
                  >
                    Cancel
                  </button>,
                  "className": "button-container",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Cancel",
                    "id": "cancel",
                    "onClick": [Function],
                    "type": "button",
                  },
                  "ref": null,
                  "rendered": "Cancel",
                  "type": "button",
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
        ],
        "type": "form",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <span>
            Please provide your login credentials for:
          </span>,
          <span
            className="hostname"
          >
            unknown
          </span>,
          <span
            className="credentials-error"
            id="credentialsError"
          >
            Invalid user name/password
          </span>,
          <form
            action="Login"
            id="basicAuth"
            name="Basic Auth"
            onSubmit={[Function]}
          >
            <table
              className="form"
            >
              <tbody>
                <tr>
                  <td
                    id="username-text"
                  >
                    User name:
                  </td>
                  <td>
                    <input
                      id="username"
                      name="username"
                      onChange={[Function]}
                      required={true}
                      title="Username"
                    />
                  </td>
                </tr>
                <tr>
                  <td
                    id="password-text"
                  >
                    Password:
                  </td>
                  <td>
                    <input
                      id="password"
                      name="password"
                      onChange={[Function]}
                      required={true}
                      title="Password"
                      type="password"
                    />
                  </td>
                </tr>
              </tbody>
            </table>
            <div
              className="footer"
            >
              <div
                className="button-container"
              >
                <button
                  id="login"
                  type="submit"
                >
                  Log In
                </button>
              </div>
              <div
                className="button-container"
              >
                <button
                  id="cancel"
                  onClick={[Function]}
                  type="button"
                >
                  Cancel
                </button>
              </div>
            </div>
          </form>,
        ],
        "className": "container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Please provide your login credentials for:",
          },
          "ref": null,
          "rendered": "Please provide your login credentials for:",
          "type": "span",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "unknown",
            "className": "hostname",
          },
          "ref": null,
          "rendered": "unknown",
          "type": "span",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Invalid user name/password",
            "className": "credentials-error",
            "id": "credentialsError",
          },
          "ref": null,
          "rendered": "Invalid user name/password",
          "type": "span",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "action": "Login",
            "children": Array [
              <table
                className="form"
              >
                <tbody>
                  <tr>
                    <td
                      id="username-text"
                    >
                      User name:
                    </td>
                    <td>
                      <input
                        id="username"
                        name="username"
                        onChange={[Function]}
                        required={true}
                        title="Username"
                      />
                    </td>
                  </tr>
                  <tr>
                    <td
                      id="password-text"
                    >
                      Password:
                    </td>
                    <td>
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        required={true}
                        title="Password"
                        type="password"
                      />
                    </td>
                  </tr>
                </tbody>
              </table>,
              <div
                className="footer"
              >
                <div
                  className="button-container"
                >
                  <button
                    id="login"
                    type="submit"
                  >
                    Log In
                  </button>
                </div>
                <div
                  className="button-container"
                >
                  <button
                    id="cancel"
                    onClick={[Function]}
                    type="button"
                  >
                    Cancel
                  </button>
                </div>
              </div>,
            ],
            "id": "basicAuth",
            "name": "Basic Auth",
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <tbody>
                  <tr>
                    <td
                      id="username-text"
                    >
                      User name:
                    </td>
                    <td>
                      <input
                        id="username"
                        name="username"
                        onChange={[Function]}
                        required={true}
                        title="Username"
                      />
                    </td>
                  </tr>
                  <tr>
                    <td
                      id="password-text"
                    >
                      Password:
                    </td>
                    <td>
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        required={true}
                        title="Password"
                        type="password"
                      />
                    </td>
                  </tr>
                </tbody>,
                "className": "form",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <tr>
                      <td
                        id="username-text"
                      >
                        User name:
                      </td>
                      <td>
                        <input
                          id="username"
                          name="username"
                          onChange={[Function]}
                          required={true}
                          title="Username"
                        />
                      </td>
                    </tr>,
                    <tr>
                      <td
                        id="password-text"
                      >
                        Password:
                      </td>
                      <td>
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          required={true}
                          title="Password"
                          type="password"
                        />
                      </td>
                    </tr>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <td
                          id="username-text"
                        >
                          User name:
                        </td>,
                        <td>
                          <input
                            id="username"
                            name="username"
                            onChange={[Function]}
                            required={true}
                            title="Username"
                          />
                        </td>,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "User name:",
                          "id": "username-text",
                        },
                        "ref": null,
                        "rendered": "User name:",
                        "type": "td",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": <input
                            id="username"
                            name="username"
                            onChange={[Function]}
                            required={true}
                            title="Username"
                          />,
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "id": "username",
                            "name": "username",
                            "onChange": [Function],
                            "required": true,
                            "title": "Username",
                          },
                          "ref": null,
                          "rendered": null,
                          "type": "input",
                        },
                        "type": "td",
                      },
                    ],
                    "type": "tr",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <td
                          id="password-text"
                        >
                          Password:
                        </td>,
                        <td>
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            required={true}
                            title="Password"
                            type="password"
                          />
                        </td>,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Password:",
                          "id": "password-text",
                        },
                        "ref": null,
                        "rendered": "Password:",
                        "type": "td",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            required={true}
                            title="Password"
                            type="password"
                          />,
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "required": true,
                            "title": "Password",
                            "type": "password",
                          },
                          "ref": null,
                          "rendered": null,
                          "type": "input",
                        },
                        "type": "td",
                      },
                    ],
                    "type": "tr",
                  },
                ],
                "type": "tbody",
              },
              "type": "table",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="button-container"
                  >
                    <button
                      id="login"
                      type="submit"
                    >
                      Log In
                    </button>
                  </div>,
                  <div
                    className="button-container"
                  >
                    <button
                      id="cancel"
                      onClick={[Function]}
                      type="button"
                    >
                      Cancel
                    </button>
                  </div>,
                ],
                "className": "footer",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <button
                      id="login"
                      type="submit"
                    >
                      Log In
                    </button>,
                    "className": "button-container",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Log In",
                      "id": "login",
                      "type": "submit",
                    },
                    "ref": null,
                    "rendered": "Log In",
                    "type": "button",
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <button
                      id="cancel"
                      onClick={[Function]}
                      type="button"
                    >
                      Cancel
                    </button>,
                    "className": "button-container",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Cancel",
                      "id": "cancel",
                      "onClick": [Function],
                      "type": "button",
                    },
                    "ref": null,
                    "rendered": "Cancel",
                    "type": "button",
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
