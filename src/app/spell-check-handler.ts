import { app, MenuItem, WebContents } from 'electron';

import { i18n, LocaleType } from '../common/i18n';
import { logger } from '../common/logger';
import { ContextMenuBuilder } from './context-menu-builder';
import { ICustomBrowserWindow } from './window-handler';
import { reloadWindow } from './window-utils';

export class SpellChecker {
  public locale: LocaleType = 'en-US';

  constructor() {
    app.on('web-contents-created', (_event, webContents): void => {
      this.attachToWebContents(webContents);
    });
  }

  /**
   * Attaches context-menu event for every webContents
   *
   * @param webContents {WebContents}
   */
  public attachToWebContents(webContents: WebContents): void {
    const contextMenuBuilder = new ContextMenuBuilder(
      webContents,
      this.processMenu,
    );
    contextMenuBuilder.setAlternateStringFormatter(this.getStringTable());
    this.locale = i18n.getLocale();
    logger.info(
      `spell-check-handler: Building context menu with locale ${this.locale}!`,
    );
    const contextMenuListener = (_event, info) => {
      if (this.locale !== i18n.getLocale()) {
        contextMenuBuilder.setAlternateStringFormatter(this.getStringTable());
        this.locale = i18n.getLocale();
      }
      contextMenuBuilder.showPopupMenu(info);
    };

    webContents.on('context-menu', contextMenuListener);
    webContents.once('destroyed', () => {
      webContents.removeListener('context-menu', contextMenuListener);
    });
  }

  /**
   * Builds the string table for context menu
   *
   * @return {Object} - String table for context menu
   */
  private getStringTable(): object {
    const namespace = 'ContextMenu';
    return {
      copyMail: () => i18n.t('Copy Email Address', namespace)(),
      copyLinkUrl: () => i18n.t('Copy Link', namespace)(),
      openLinkUrl: () => i18n.t('Open Link', namespace)(),
      copyImageUrl: () => i18n.t('Copy Image URL', namespace)(),
      copyImage: () => i18n.t('Copy Image', namespace)(),
      addToDictionary: () => i18n.t('Add to Dictionary', namespace)(),
      lookUpDefinition: (lookup) => {
        const formattedString = i18n.t(
          'Look Up {searchText}',
          namespace,
        )({ searchText: lookup.word });
        return formattedString || `Look Up ${lookup.word}`;
      },
      searchGoogle: () => i18n.t('Search with Google', namespace)(),
      cut: () => i18n.t('Cut')(),
      copy: () => i18n.t('Copy')(),
      paste: () => i18n.t('Paste')(),
      inspectElement: () => i18n.t('Inspect Element', namespace)(),
      pasteAsPlainText: () => i18n.t('Paste as plain text')(),
    };
  }

  /**
   * Method to add default menu items to the
   * menu that was generated by ContextMenuBuilder
   *
   * This method get invoked by electron-spellchecker
   * before showing the context menu
   *
   * @param menu
   * @returns menu
   */
  private processMenu(menu: Electron.Menu): Electron.Menu {
    let isLink = false;
    menu.items.map((item) => {
      if (item.label === 'Copy Link') {
        isLink = true;
      }
      return item;
    });

    if (!isLink) {
      menu.append(new MenuItem({ type: 'separator' }));
      menu.append(
        new MenuItem({
          accelerator: 'CmdOrCtrl+R',
          label: i18n.t('Reload')(),
          click: (_menuItem, browserWindow, _event) => {
            reloadWindow(browserWindow as ICustomBrowserWindow);
          },
        }),
      );
    }
    return menu;
  }
}
